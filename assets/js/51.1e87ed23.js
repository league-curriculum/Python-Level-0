(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{334:function(t,e,a){"use strict";a.r(e);var s=a(14),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" Variables")]),t._v(" "),e("p",[t._v("A variable is a way to store information, like a box where you can put\nsomething for using later. Variables have names, which is like a label on the\nbox. You can set or change change the contents of the box with the '=',\nwhich we call the 'assignment operator'.")]),t._v(" "),e("p",[t._v("Here is an examples of assigning a variable:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("tony "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" turtle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Turtle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Surprise! You've been using variables all along! Here the name of the variable\nis "),e("code",[t._v("tony")]),t._v(" and the contents of the variable, like the contents of a box, is a turtle.")]),t._v(" "),e("p",[t._v("Here are some more examples, storing numnbers into variables")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("apples "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\noranges "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n")])])]),e("p",[t._v("How many fruits do we have? We can add them:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("apples"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("oranges"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n")])])]),e("p",[t._v("Since variables can hold numbers, and we can add numbers, so we can add the variables to get the answer.")]),t._v(" "),e("p",[t._v("Try it yourself. But first, notice the last line, which has "),e("code",[t._v("assert")]),t._v(" on it, which means,\n'complain if this is not true'. The assert will produce an error message if\nyour variables don't add to 15.  Make the variables add to 15 to make the\n"),e("code",[t._v("assert")]),t._v(" happy, then try making it unhappy by making them add to any other\nnumber, just to see whan an error looks like. We will sometimes use "),e("code",[t._v("assert")]),t._v("\nto check if your answers are correct.")]),t._v(" "),e("iframe",{attrs:{width:"100%",height:"250",src:"https://trinket.io/tools/1.0/jekyll/embed/python#code=%23%20Make%20the%20numbers%20add%20to%2015%0A%0Ax%20%3D%2010%0Ay%20%3D%20%20%20%23%20Finish%20the%20line%20with%20the%20right%20string%0A%0Aassert%20x%20%2B%20y%20%3D%3D%2015%2C%20%22The%20sum%20should%20be%2015%22%0A%0Aprint%28%22Yeah%21%20%F0%9F%8E%89%22%29",frameborder:"0",marginwidth:"0",marginheight:"0",allowfullscreen:""}}),t._v(" "),e("p",[t._v("We've already seen addition, but we can also subtract, multiply and divide.\nHowever, multiplication and division use symbols that are a little different\nfrom what you are used to:")]),t._v(" "),e("ul",[e("li",[t._v('Multiplication uses "*", so '),e("code",[t._v("10*5 == 50")])]),t._v(" "),e("li",[t._v('Division uses "/", so '),e("code",[t._v("50/5 == 10")])])]),t._v(" "),e("p",[t._v("For instance:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("pizza_slices "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\npeople "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\npizza_per_person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pizza_slices "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pizza_per_person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# What is this????")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),e("p",[t._v('In Python, there are many different types of things we can put in the\nvariable, including numbers and words, which we will call "text"\nor "strings".')]),t._v(" "),e("p",[t._v('It might seem weird that words are called "strings" but it\'s not if you think\nabout it like a computer, which is that it is made of letters, one after the other, like a friendship bracelet.')]),t._v(" "),e("img",{attrs:{src:"https://i.pinimg.com/originals/86/47/ce/8647ce37cd76a5188c04be03d8969ad5.jpg",alt:"Friendship Bracelet",width:"200"}}),t._v(" "),e("p",[t._v("Strings work a bit differently than numbers; when we add them, they are "),e("em",[t._v("concatenated")]),t._v(' which means "combined end to end"')]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("h "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\ns "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v("\nw "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("w"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nHello World\n")])])]),e("p",[t._v("Now, try the same thing we did with numbers, but with strings:")]),t._v(" "),e("iframe",{attrs:{width:"100%",height:"250",src:"https://trinket.io/tools/1.0/jekyll/embed/python#code=%23%20Make%20the%20numbers%20add%20to%2015%0A%0Ax%20%3D%20%22Hello%20%22%0Ay%20%3D%20%20%20%23%20Finish%20the%20line%20with%20the%20right%20number%0A%0Aassert%20x%20%2B%20y%20%3D%3D%20%22Hello%20World%22%0Aprint%28%22Yeah%21%20%22%2Bx%2By%2B%22%20%F0%9F%8E%89%22%29",frameborder:"0",marginwidth:"0",marginheight:"0",allowfullscreen:""}}),t._v(" "),e("p",[t._v("We can use variables to store commands for our turtle. Let's start with a program that we created\nearlier, but update it to use variables.")]),t._v(" "),e("iframe",{attrs:{width:"100%",height:"500",src:"https://trinket.io/tools/1.0/jekyll/embed/python#code=import%20turtle%0Atina%20%3D%20turtle.Turtle%28%29%0Atina.shape%28%22turtle%22%29%0A%0Aforward%20%3D%20%23%20Amount%20to%20move%20forward%0Aleft%20%3D%20%23%20amount%20to%20turn%20left%0A%0A%0A%23%20In%20the%20lines%20below%2C%20use%20the%20variables%20%0A%23%20instead%20of%20numbers.%20%0A%0Atina.forward%2850%29%0Atina.left%2890%29%0A%0Atina.forward%2850%29%0Atina.left%2890%29%0A%0Atina.forward%2850%29%0Atina.left%2890%29%0A%0Atina.forward%2850%29%0Atina.left%2890%29%0A%0A%23%20Now%2C%20try%20changing%20the%20values%20for%20%0A%23%20forward%20and%20left%20and%20see%20what%20new%20%0A%23%20shapes%20Tina%20draws.",frameborder:"0",marginwidth:"0",marginheight:"0",allowfullscreen:""}})])}),[],!1,null,null,null);e.default=r.exports}}]);